#!/usr/bin/env python3
# test_callback_fix.py
"""
Test that callback conflicts are resolved
"""

import sys
import os

# Add project root to path
project_root = os.path.dirname(os.path.abspath(__file__))
sys.path.insert(0, project_root)

def test_app_import():
    """Test that app can be imported without callback errors"""
    print("üîç Testing app import without callback conflicts...")
    
    try:
        # Import the main modules that register callbacks
        from ui.components.secure_upload_handlers import create_secure_upload_handlers
        print("‚úÖ Secure upload handlers import OK")
        
        from ui.components.mapping_handlers import create_mapping_handlers  
        print("‚úÖ Mapping handlers import OK")
        
        from ui.components.classification_handlers import create_classification_handlers
        print("‚úÖ Classification handlers import OK")
        
        from ui.components.graph_handlers import create_graph_handlers
        print("‚úÖ Graph handlers import OK")
        
        # Test creating a minimal Dash app
        import dash
        from dash import Input, Output
        
        test_app = dash.Dash(__name__, suppress_callback_exceptions=True)
        
        # Test that we can create handlers without conflicts
        mock_component = {}
        mock_icons = {'default': 'test', 'success': 'test', 'fail': 'test'}
        
        upload_handlers = create_secure_upload_handlers(test_app, mock_component, mock_icons)
        print("‚úÖ Upload handlers created without error")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Import/creation test failed: {e}")
        return False

def test_callback_registration():
    """Test that callbacks can be registered without conflicts"""
    print("\nüîç Testing callback registration...")
    
    try:
        import dash
        from dash import Input, Output, html
        
        # Create test app
        test_app = dash.Dash(__name__, suppress_callback_exceptions=True)
        test_app.layout = html.Div([
            html.Div(id='upload-status'),
            html.Img(id='upload-icon'),
            html.Div(id='csv-store'),
            html.Div(id='upload-section'),
            html.Div(id='mapping-section'),
            html.Div(id='num-floors-display'),
            html.Div(id='num-floors-store'),
            html.Div(id='num-floors-slider'),
        ])
        
        # Try to register callbacks
        from ui.components.secure_upload_handlers import create_secure_upload_handlers
        
        mock_component = {}
        mock_icons = {'default': 'test', 'success': 'test', 'fail': 'test'}
        
        upload_handlers = create_secure_upload_handlers(test_app, mock_component, mock_icons)
        
        # This should not raise an error about duplicate outputs
        upload_handlers.register_callbacks()
        print("‚úÖ Upload callbacks registered successfully")
        
        return True
        
    except Exception as e:
        error_msg = str(e)
        if "already in use" in error_msg or "duplicate" in error_msg.lower():
            print(f"‚ùå Callback conflict detected: {e}")
            print("üîß Need to remove duplicate callbacks")
            return False
        else:
            print(f"‚ùå Other callback error: {e}")
            return False

def test_floor_slider_conflict():
    """Specifically test for floor slider conflicts"""
    print("\nüîç Testing for floor slider callback conflicts...")
    
    try:
        # Check if app.py contains floor slider callback
        app_py_path = 'app.py'
        if os.path.exists(app_py_path):
            with open(app_py_path, 'r') as f:
                content = f.read()
            
            # Look for floor slider callback patterns
            conflict_patterns = [
                'num-floors-display',
                'num-floors-store',
                'update_floor_number'
            ]
            
            found_conflicts = []
            for pattern in conflict_patterns:
                if pattern in content and '@app.callback' in content:
                    # Check if this pattern appears near a callback
                    lines = content.split('\n')
                    for i, line in enumerate(lines):
                        if pattern in line:
                            # Check surrounding lines for @app.callback
                            start = max(0, i-10)
                            end = min(len(lines), i+10)
                            surrounding = '\n'.join(lines[start:end])
                            if '@app.callback' in surrounding:
                                found_conflicts.append(f"Line {i+1}: {line.strip()}")
            
            if found_conflicts:
                print("‚ùå Found potential floor slider conflicts in app.py:")
                for conflict in found_conflicts:
                    print(f"   {conflict}")
                return False
            else:
                print("‚úÖ No floor slider conflicts found in app.py")
                return True
        else:
            print("‚ö†Ô∏è app.py not found")
            return True
            
    except Exception as e:
        print(f"‚ùå Floor slider test failed: {e}")
        return False

def main():
    """Run all callback conflict tests"""
    print("üîç Testing Callback Conflict Resolution")
    print("=" * 50)
    
    all_passed = True
    
    # Run tests
    all_passed &= test_app_import()
    all_passed &= test_callback_registration() 
    all_passed &= test_floor_slider_conflict()
    
    print("\n" + "=" * 50)
    if all_passed:
        print("üéâ ALL CALLBACK TESTS PASSED!")
        print("\n‚úÖ No callback conflicts detected!")
        print("‚úÖ App should start without errors")
        print("‚úÖ Floor slider handled correctly")
        print("\nüöÄ Ready to start your app:")
        print("   python3 app.py")
    else:
        print("‚ùå CALLBACK CONFLICTS DETECTED!")
        print("\nüîß Quick fixes:")
        print("1. Remove floor slider callback from app.py")
        print("2. Use the fixed app.py version provided")
        print("3. Run: python3 diagnose_callbacks.py")
    
    return all_passed

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
0

